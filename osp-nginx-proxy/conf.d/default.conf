# ----------------------------------------
# 1. Servidor HTTP (puerto 80)
#    • Solo health-check /health
#    • Redirige todo lo demás a HTTPS
# ----------------------------------------
server {
    listen 80;
    server_name localhost;

    # Health check (primera prioridad)
    location = /health {
        if ($request_method !~ ^(GET|HEAD)$) {
            return 405 '{"error":"Method Not Allowed"}';
        }
        access_log off;
        add_header Content-Type "application/json" always;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601"}';
    }

    # Redirige todo lo demás a HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# ----------------------------------------
# 2. Servidor HTTPS (puerto 443)
#    • Certificados SSL/TLS
#    • HSTS, CSP y demás cabeceras de seguridad
#    • Todas las rutas proxy, streaming y frontend
# ----------------------------------------
server {
    listen 443 ssl;
    http2 on;
    server_name localhost;

    # ——— Certificados SSL ———
    ssl_certificate     /etc/nginx/ssl/mi_certificado.crt;
    ssl_certificate_key /etc/nginx/ssl/mi_clave_privada.key;

    # ——— Seguridad TLS mínimas recomendadas ———
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # ——— CSP por defecto ———
    set $default_csp "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://unpkg.com; script-src-elem 'self' https://unpkg.com; connect-src 'self' http://localhost; style-src 'self' 'unsafe-inline'; img-src 'self' data: https: http:; base-uri 'self'; object-src 'none'; frame-ancestors 'self';";

    # ——— Cabeceras de seguridad ———
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options               "SAMEORIGIN"                                 always;
    add_header X-XSS-Protection              "1; mode=block"                              always;
    add_header X-Content-Type-Options        "nosniff"                                    always;
    add_header Referrer-Policy               "strict-origin-when-cross-origin"            always;
    add_header X-Permitted-Cross-Domain-Policies "none"                                    always;
    add_header Content-Security-Policy       $default_csp                                 always;

    # ----------------------------------------
    # Health check (HTTPS)
    # ----------------------------------------
    location = /health {
        if ($request_method !~ ^(GET|HEAD)$) {
            return 405 '{"error":"Method Not Allowed"}';
        }
        access_log off;
        add_header Content-Type "application/json" always;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601"}';
    }

    # ----------------------------------------
    # /api/auth/google
    # ----------------------------------------
    location = /api/auth/google {
        # CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin  "*"       always;
            add_header Access-Control-Allow-Methods "GET, POST, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Max-Age       1728000  always;
            add_header Content-Type                "text/plain; charset=utf-8" always;
            add_header Content-Length              0        always;
            return 204;
        }
        # Sólo GET/HEAD/POST
        if ($request_method !~ ^(GET|HEAD|POST)$) {
            add_header Content-Type "application/json" always;
            return 405 '{"error":"Method Not Allowed"}';
        }
        # Deshabilitar cache en auth
        add_header Accept-Ranges bytes                   always;
        add_header Cache-Control   "no-cache, no-store, must-revalidate" always;
        add_header Pragma          "no-cache"                   always;
        add_header Expires         "0"                          always;

        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://api_gateway;

        proxy_http_version 1.1;
        proxy_set_header Connection          "";
        proxy_set_header Host                $host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto   $scheme;

        # Caching de segmentos (opcional para auth también)
        proxy_buffering          on;
        proxy_buffer_size        128k;
        proxy_buffers            4 256k;
        proxy_busy_buffers_size  256k;
        proxy_max_temp_file_size 0;
        proxy_cache              video_cache;
        proxy_cache_key          $scheme$proxy_host$request_uri;
        proxy_cache_valid        200 206 10m;

        proxy_connect_timeout 10s;
        proxy_send_timeout    60s;
        proxy_read_timeout    60s;
    }

    # ----------------------------------------
    # /api/auth/github
    # ----------------------------------------
    location = /api/auth/github {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin  "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Max-Age       1728000 always;
            add_header Content-Type                "text/plain; charset=utf-8" always;
            add_header Content-Length              0 always;
            return 204;
        }
        if ($request_method !~ ^(GET|HEAD|POST)$) {
            add_header Content-Type "application/json" always;
            return 405 '{"error":"Method Not Allowed"}';
        }
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://api_gateway;

        proxy_http_version 1.1;
        proxy_set_header Host                $host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto   $scheme;
        proxy_set_header Authorization       $http_authorization;
        proxy_pass_request_headers on;
        proxy_redirect off;

        proxy_connect_timeout 30s;
        proxy_send_timeout    30s;
        proxy_read_timeout    30s;

        add_header Content-Security-Policy $default_csp always;
    }

    # ----------------------------------------
    # /api/protected
    # ----------------------------------------
    location = /api/protected {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin  "*" always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Max-Age       1728000 always;
            add_header Content-Type                "text/plain; charset=utf-8" always;
            add_header Content-Length              0 always;
            return 204;
        }
        if ($request_method !~ ^(GET|HEAD)$) {
            add_header Content-Type "application/json" always;
            return 405 '{"error":"Method Not Allowed"}';
        }
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://api_gateway;

        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization     $http_authorization;
        proxy_pass_request_headers on;

        proxy_connect_timeout 10s;
        proxy_send_timeout    10s;
        proxy_read_timeout    10s;

        add_header Content-Security-Policy $default_csp always;
    }

    # ----------------------------------------
    # Video streaming (/api/video)
    # ----------------------------------------
    location = /api/video {
        # CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin  "*" always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range" always;
            add_header Access-Control-Max-Age       1728000 always;
            add_header Content-Type                "text/plain; charset=utf-8" always;
            add_header Content-Length              0 always;
            return 204;
        }
        # Sólo GET/HEAD
        if ($request_method !~ ^(GET|HEAD)$) {
            add_header Content-Type "application/json" always;
            return 405 '{"error":"Method Not Allowed"}';
        }
        # Partial requests y no-cache
        add_header Accept-Ranges bytes                               always;
        add_header Cache-Control   "no-cache, no-store, must-revalidate" always;
        add_header Pragma          "no-cache"                       always;
        add_header Expires         "0"                              always;

        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://osp-api-gateway:8887;

        proxy_http_version 1.1;
        proxy_set_header Connection          "";
        proxy_set_header Host                $host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto   $scheme;

        # Buffers y caching de segmentos
        proxy_buffering          on;
        proxy_buffer_size        128k;
        proxy_buffers            4 256k;
        proxy_busy_buffers_size  256k;
        proxy_max_temp_file_size 0;

        proxy_cache       video_cache;
        proxy_cache_key   $scheme$proxy_host$request_uri;
        proxy_cache_valid 200 206 10m;

        proxy_connect_timeout 10s;
        proxy_send_timeout    60s;
        proxy_read_timeout    60s;
    }

    # ----------------------------------------
    # API Gateway general (/api/)
    # ----------------------------------------
    location /api/ {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin  "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Max-Age       1728000 always;
            add_header Content-Type                "text/plain; charset=utf-8" always;
            add_header Content-Length              0 always;
            return 204;
        }
        if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE)$) {
            add_header Content-Type "application/json" always;
            return 405 '{"error":"Method Not Allowed"}';
        }
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://api_gateway;

        proxy_http_version 1.1;
        proxy_set_header Host                $host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto   $scheme;
        proxy_set_header Authorization       $http_authorization;
        proxy_pass_request_headers on;

        proxy_connect_timeout 10s;
        proxy_send_timeout    30s;
        proxy_read_timeout    30s;

        add_header Content-Security-Policy $default_csp always;
    }

    # ----------------------------------------
    # Frontend (/) 
    # ----------------------------------------
    location / {
        # CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin  "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range" always;
            add_header Access-Control-Max-Age       1728000 always;
            add_header Content-Type                "text/plain; charset=utf-8" always;
            add_header Content-Length              0 always;
            return 204;
        }
        # Sólo GET/HEAD/POST
        if ($request_method !~ ^(GET|HEAD|POST)$) {
            add_header Content-Type "application/json" always;
            return 405 '{"error":"Method Not Allowed"}';
        }

        proxy_pass http://frontend_web;
        proxy_http_version 1.1;
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        $connection_upgrade;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass  $http_upgrade;
        proxy_redirect      off;
        proxy_connect_timeout 5s;
        proxy_send_timeout    10s;
        proxy_read_timeout    10s;

        add_header Content-Security-Policy $default_csp always;
    }
}